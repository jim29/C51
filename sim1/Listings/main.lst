C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2           *    µ¥Æ¬»úµÚ¾Å½ìÄ£ÄâÌâ ¡°ÎÂ¶È¼ÇÂ¼Æ÷¡±
   3           *                                        by MRY     2020/9/12
   4          **/
   5          
   6          #include <config.h>
   7          #include <intrins.h>
   8          #include <ds1302.h>
   9          #include <onewire.h>
  10          
  11          code u8 SEG_TAB[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0xFF, 0xBF}; //Êý×Ö0~9; ¿
             -Õ; '-'
  12          code u8 TEMP_n = 10;
  13          u8 SEG_CONTENT[] = {10, 10, 10, 10, 10, 11, 0, 1};
  14          u8 TIME_HOUR = 0x23, TIME_MIN = 0x59, TIME_SEC = 0x50;
  15          u8 TEM_DUTY[] = {1, 5, 30, 60};
  16          u8 TEM_DUTY_i = 0;
  17          u8 TEMP_SAVE[] = {24, 24, 24, 24, 24, 24, 24 ,24, 24, 24};
  18          u8 TEMP_i;
  19          u8 STATE;
  20          u8 SEC_n;
  21          u16 SYS_TICK; u16 SYS_TICK_tmp;
  22          bit temp_end_flag;
  23          
  24          void Latch_Ctrl(u8 ID, u8 val);
  25          void Seg_Disp(u8 index, u8 val);
  26          void Sys_Init();
  27          void Timer0Init(void);
  28          void Seg_Fresh();
  29          void Duty2Seg();
  30          void Delay_20ms();
  31          u8 Key_Scan();
  32          void Update_Time();
  33          u8 Read_Temp();
  34          void Update_Temp();
  35          
  36          /**
  37           *  main function
  38           *
  39           */
  40          void main()
  41          {
  42   1        u8 key_pressed;
  43   1        Sys_Init();
  44   1        Timer0Init();
  45   1        
  46   1        while(1)
  47   1        {
  48   2          key_pressed = Key_Scan();
  49   2          if (key_pressed != KEY_NONE)
  50   2          {
  51   3            if (key_pressed == KEY_S4 && STATE == SETTING)
  52   3            {
  53   4              TEM_DUTY_i ++;
C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 2   

  54   4              if (TEM_DUTY_i > 3) TEM_DUTY_i = 0;
  55   4              Duty2Seg();
  56   4            }
  57   3            else if (key_pressed == KEY_S5)
  58   3            {
  59   4              if (STATE == SETTING) 
  60   4              {
  61   5                STATE = TIME;
  62   5                Write_Ds1302(0x80, TIME_SEC);
  63   5                Write_Ds1302(0x82, TIME_MIN);
  64   5                Write_Ds1302(0x84, TIME_HOUR);
  65   5                while (1)
  66   5                {
  67   6                  SYS_TICK_tmp = SYS_TICK;
  68   6                  while (SYS_TICK == SYS_TICK_tmp)  ;
  69   6                  if (SYS_TICK % 20 == 0) //60ms
  70   6                  {
  71   7                    Update_Time();
  72   7                    if ((SEC_n >= TEM_DUTY[TEM_DUTY_i]) && (temp_end_flag == 0))
  73   7                    {
  74   8                      SEC_n = 0;
  75   8                      TEMP_SAVE[TEMP_i] = Read_Temp();
  76   8                      TEMP_i ++;
  77   8                      if (TEMP_i >= TEMP_n)
  78   8                      {
  79   9                        TEMP_i = 0;
  80   9                        SEC_n = 0;
  81   9                        temp_end_flag = 1;
  82   9                      }
  83   8                    }
  84   7                    else if (temp_end_flag == 1)
  85   7                    {
  86   8                      key_pressed = Key_Scan();
  87   8                      if (key_pressed == KEY_S6)
  88   8                      {
  89   9                        STATE = TEMP;
  90   9                        temp_end_flag = 0;
  91   9                        Latch_Ctrl(LED_ID, 0xFF);
  92   9                        Update_Temp();
  93   9                        break;
  94   9                      }
  95   8                    }
  96   7                  }   
  97   6                }
  98   5              }
  99   4            }
 100   3            else if (key_pressed == KEY_S6 && STATE == TEMP)
 101   3            {
 102   4              ////////////////////
 103   4              Update_Temp();
 104   4              if (TEMP_i >= TEMP_n)
 105   4              {
 106   5                TEMP_i = 0;
 107   5              }
 108   4            }
 109   3            else if (key_pressed == KEY_S7 && STATE == TEMP)
 110   3            {
 111   4              STATE = SETTING;
 112   4              TEMP_i = 0;
 113   4              TEM_DUTY_i = 0;
 114   4              Duty2Seg();
 115   4            }
C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 3   

 116   3          }
 117   2        }
 118   1        
 119   1        
 120   1      }
 121          
 122          
 123          void Latch_Ctrl(u8 ID, u8 val)
 124          {
 125   1        P0 = val;
 126   1        P2 = ID << 5;
 127   1        _nop_();
 128   1        _nop_();
 129   1        _nop_();
 130   1        P2 = 0;
 131   1      }
 132          
 133          
 134          void Sys_Init()
 135          {
 136   1        bit ds1802_flag = 1;
 137   1        Latch_Ctrl(ULN_ID, 0x00);
 138   1        Latch_Ctrl(LED_ID, 0xFF);
 139   1        Latch_Ctrl(SEG_COM_ID, 0x00);
 140   1        STATE = SETTING;
 141   1        TEMP_i = 0;
 142   1        SEC_n = 0;
 143   1        SYS_TICK = 0;
 144   1        temp_end_flag = 0;
 145   1      }
 146          
 147          
 148          void Timer0Init(void)   //3ºÁÃë@12.000MHz
 149          {
 150   1        AUXR |= 0x80;   //¶¨Ê±Æ÷Ê±ÖÓ1TÄ£Ê½
 151   1        TMOD &= 0xF0;   //ÉèÖÃ¶¨Ê±Æ÷Ä£Ê½
 152   1        TL0 = 0x60;   //ÉèÖÃ¶¨Ê±³õÖµ
 153   1        TH0 = 0x73;   //ÉèÖÃ¶¨Ê±³õÖµ
 154   1        TF0 = 0;    //Çå³ýTF0±êÖ¾
 155   1        TR0 = 1;    //¶¨Ê±Æ÷0¿ªÊ¼¼ÆÊ±
 156   1        EA = 1;
 157   1        ET0 = 1;
 158   1      }
 159          
 160          void T0_Inter() interrupt 1
 161          {
 162   1        Seg_Fresh();
 163   1        SYS_TICK ++;
 164   1        if (SYS_TICK > 10000) SYS_TICK = 0;
 165   1      }
 166          
 167          
 168          
 169          void Seg_Disp(u8 index, u8 val)
 170          {
 171   1        Latch_Ctrl(SEG_COM_ID, 1 << index); // index 0~7
 172   1        Latch_Ctrl(SEG_SEC_ID, SEG_TAB[val]);
 173   1      }
 174          
 175          
 176          void Seg_Fresh()
 177          {
C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 4   

 178   1        static u8 i = 0;
 179   1        Seg_Disp(i, SEG_CONTENT[i]);
 180   1        i ++;
 181   1        if (i >= 8) i = 0;
 182   1      }
 183          
 184          
 185          void Duty2Seg()
 186          {
 187   1        SEG_CONTENT[0] = 10;
 188   1        SEG_CONTENT[1] = 10;
 189   1        SEG_CONTENT[2] = 10;
 190   1        SEG_CONTENT[3] = 10;
 191   1        SEG_CONTENT[4] = 10;
 192   1        SEG_CONTENT[5] = 11;
 193   1        SEG_CONTENT[6] = TEM_DUTY[TEM_DUTY_i] / 10;
 194   1        SEG_CONTENT[7] = TEM_DUTY[TEM_DUTY_i] % 10;
 195   1      }
 196          
 197          
 198          void Delay_20ms()
 199          {
 200   1        unsigned char i, j, k;
 201   1        _nop_();
 202   1        _nop_();
 203   1        i = 1;
 204   1        j = 234;
 205   1        k = 113;
 206   1        do
 207   1        {
 208   2          do
 209   2          {
 210   3            while (--k);
 211   3          } while (--j);
 212   2        } while (--i);
 213   1      }
 214          
 215          
 216          u8 Key_Scan()
 217          {
 218   1        u8 key = KEY_NONE;
 219   1        if (P30 == 0)
 220   1        {
 221   2          Delay_20ms();
 222   2          if (P30 == 0)
 223   2          {
 224   3            while (P30 == 0) ;
 225   3            key = KEY_S7;
 226   3          }
 227   2        }
 228   1        else if (P31 == 0)
 229   1        {
 230   2          Delay_20ms();
 231   2          if (P31 == 0) 
 232   2          {
 233   3            while (P31 == 0) ;
 234   3            key = KEY_S6;
 235   3          }
 236   2        }
 237   1        else if (P32 == 0)
 238   1        {
 239   2          Delay_20ms();
C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 5   

 240   2          if (P32 == 0) 
 241   2          {
 242   3            while (P32 == 0) ;
 243   3            key = KEY_S5;
 244   3          }
 245   2        }
 246   1        else if (P33 == 0)
 247   1        {
 248   2          Delay_20ms();
 249   2          if (P33 == 0)
 250   2          {
 251   3            while (P33 == 0) ;
 252   3            key = KEY_S4;
 253   3          }
 254   2        }
 255   1        else  key = KEY_NONE;
 256   1        return key;
 257   1      }
 258          
 259          
 260          void Update_Time()
 261          {
 262   1        u8 sec_tmp;
 263   1        bit flag = 0;
 264   1        sec_tmp = Read_Ds1302(0x81);
 265   1        if (sec_tmp != TIME_SEC)
 266   1        {
 267   2          flag = ~flag;
 268   2          SEC_n ++;
 269   2        }
 270   1        TIME_SEC = sec_tmp;
 271   1        TIME_MIN = Read_Ds1302(0x83);
 272   1        TIME_HOUR = Read_Ds1302(0x85);
 273   1        SEG_CONTENT[0] = TIME_HOUR >> 4;
 274   1        SEG_CONTENT[1] = TIME_HOUR & 0x0F;
 275   1        SEG_CONTENT[2] = 10 + (u8)flag;
 276   1        SEG_CONTENT[3] = TIME_MIN >> 4;
 277   1        SEG_CONTENT[4] = TIME_MIN & 0x0F;
 278   1        SEG_CONTENT[5] = 10 + (u8)flag;
 279   1        SEG_CONTENT[6] = TIME_SEC >> 4;
 280   1        SEG_CONTENT[7] = TIME_SEC & 0x0F;
 281   1        if (temp_end_flag == 1)
 282   1        {
 283   2          Latch_Ctrl(LED_ID, 0xFE + (u8)flag);
 284   2        }
 285   1      }
 286          
 287          
 288          
 289          u8 Read_Temp()
 290          {
 291   1        u8 dat1, dat2, temp;
 292   1        bit ds1802_flag;
 293   1        while(1)
 294   1        {
 295   2          ds1802_flag = Init_DS18B20();
 296   2          if (ds1802_flag == 0)
 297   2          {
 298   3            //Latch_Ctrl(LED_ID, 0xFE);
 299   3            break;
 300   3          }
 301   2          Delay_20ms();
C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 6   

 302   2        }
 303   1        Write_DS18B20(0xCC);
 304   1        Write_DS18B20(0x44);
 305   1        SYS_TICK_tmp = SYS_TICK;
 306   1        while (1)
 307   1        {
 308   2          while (SYS_TICK == SYS_TICK_tmp)  ;
 309   2          if (SYS_TICK % 200 == 0)   break;//600ms 
 310   2        }
 311   1        while(1)
 312   1        {
 313   2          ds1802_flag = Init_DS18B20();
 314   2          if (ds1802_flag == 0)
 315   2          {
 316   3            //Latch_Ctrl(LED_ID, 0xFE);
 317   3            break;
 318   3          }
 319   2          Delay_20ms();
 320   2        }
 321   1        Write_DS18B20(0xCC);
 322   1        Write_DS18B20(0xBE);
 323   1        dat1 = Read_DS18B20();
 324   1        dat2 = Read_DS18B20();
 325   1        while(1)
 326   1        {
 327   2          ds1802_flag = Init_DS18B20();
 328   2          if (ds1802_flag == 0)
 329   2          {
 330   3            //Latch_Ctrl(LED_ID, 0xFE);
 331   3            break;
 332   3          }
 333   2          Delay_20ms();
 334   2        }
 335   1        temp = (dat1 >> 4) + (dat2 << 4);
 336   1        return temp;
 337   1      }
 338          
 339          
 340          void Update_Temp()
 341          {
 342   1        SEG_CONTENT[0] = 11;
 343   1        SEG_CONTENT[1] = TEMP_i / 10;
 344   1        SEG_CONTENT[2] = TEMP_i % 10;
 345   1        SEG_CONTENT[3] = 10;
 346   1        SEG_CONTENT[4] = 10;
 347   1        SEG_CONTENT[5] = 11;
 348   1        SEG_CONTENT[6] = TEMP_SAVE[TEMP_i] / 10;
 349   1        SEG_CONTENT[7] = TEMP_SAVE[TEMP_i] % 10;
 350   1        TEMP_i ++;
 351   1      }
 352          
 353          
 354          
 355          
 356          
 357          
 358          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    864    ----
   CONSTANT SIZE    =     13    ----
C51 COMPILER V9.57.0.0   MAIN                                                              09/12/2020 16:36:41 PAGE 7   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
